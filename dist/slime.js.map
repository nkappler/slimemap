{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/long/src/long.js","webpack:///./src/slimeMap.ts","webpack:///./src/slimeChunk.ts","webpack:///./src/seededRandom.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Long","wasm","WebAssembly","Instance","Module","Uint8Array","e","low","high","unsigned","this","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","str","radix","length","Error","RangeError","indexOf","substring","radixToPower","result","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE","long_1","__importStar","slimeChunk_1","origin","x","y","SlimeMap","id","seed","_this","height","width","xPos","yPos","mousePos","__assign","zoom","minzoom","maxzoom","chunkbuffer","borderleft","bordertop","borderbottom","borderright","grabbed","grabbedCoord","canvas","document","getElementById","setAttribute","ctx","getContext","CanvasRenderingContext2D","assertEventHandlers","default","Date","now","SCH","SlimeChunkHandler","update","drawStaticUI","vp","calcViewport","chunkvp","chunkviewport","redraw","onmousemove","event","clientX","clientY","buttons","movementX","movementY","clearfooter","drawFooter","onmousedown","_event","vec","getMapCoord","onmouseup","gotoCoordinate","coordinate","mousewheelevt","test","navigator","userAgent","evt","onscroll","attachEvent","addEventListener","preventDefault","zoomfactor","wheelDelta","detail","x1","y1","x2","y2","font","fillStyle","fillText","toFixed","Chunk","Slimes","isSlimeChunk","From","To","textAlign","fillRect","updateSlimeVP","drawSlimeChunks","drawUI","drawGrid","clearBorderRight","JSON","stringify","vec2","getAbsCoord","factor","pos","mark","lineWidth","beginPath","strokeStyle","moveTo","lineTo","stroke","closePath","fill","mapwidthcenter","mapheightcenter","isInVP","isOverMap","ignoreBorder","round","v","mapWidth","mapHeight","doMath","arg","f","isVector2D","isAABB","v2s","aabb","p1","p2","getV2sfromAABB","getAABBfromV2s","ChunkToCoord","keys","window","__importDefault","seededRandom_1","base","addend1","addend2","addend3","mask","chunk","undefined","updateSeed","zPos","tempseed","NSeededRandom","nextInt","nmultiplier","naddend","nmask","initseed","initialScramble","next","bits","b","bound","abs"],"mappings":"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","file":"slime.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","import Long, { fromString } from \"long\";\r\nimport { SlimeChunkHandler } from \"./slimeChunk\";\r\n\r\nexport interface Vector2D {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface AABB {\r\n    x1: number;\r\n    y1: number;\r\n    x2: number;\r\n    y2: number;\r\n}\r\n\r\nconst getV2sfromAABB = (aabb: AABB): { p1: Vector2D, p2: Vector2D } => {\r\n    return {\r\n        p1: { x: aabb.x1, y: aabb.y1 },\r\n        p2: { x: aabb.x2, y: aabb.y2 }\r\n    };\r\n};\r\n\r\nconst getAABBfromV2s = (p1: Vector2D, p2: Vector2D) => {\r\n    return {\r\n        x1: p1.x,\r\n        y1: p1.y,\r\n        x2: p2.x,\r\n        y2: p2.y\r\n    };\r\n};\r\n\r\nconst origin: Vector2D = { x: 0, y: 0 };\r\n\r\nexport class SlimeMap {\r\n    /** The maps seed */\r\n    private seed: Long;\r\n    /** canvas height */\r\n    private height = 0;\r\n    /** canvas width */\r\n    private width = 0;\r\n    /** x position on the map. (viewer/camera position) */\r\n    private xPos = 0;\r\n    /** y position on the map. (viewer/camera position) */\r\n    private yPos = 0;\r\n    /** the cursor Position (screen space) */\r\n    private mousePos: Vector2D = { ...origin };\r\n    /** zoom factor. higher means closer */\r\n    private zoom = 2.5;\r\n    private minzoom = 0.7;\r\n    private maxzoom = 5;\r\n    /** viewport: visible area on the map in coordinates (not px). slightly oversized to compensate for partly visible chunks. */\r\n    private vp: AABB;\r\n    /** number of chunks that should be pre-calculated in each direction. DEPRECATED. */\r\n    private chunkbuffer = 0; //current implementation does not benefit from chunk buffer.\r\n    /** visible area on map in chunks. */\r\n    private chunkvp: AABB;\r\n    /** the border on the left side between canvas and map edge. */\r\n    private borderleft = 70;\r\n    /** the border on the top side between canvas and map edge. */\r\n    private bordertop = 50;\r\n    /** the border on the bottom side between canvas and map edge. */\r\n    private borderbottom = 20;\r\n    /** the border on the left bottom between canvas and map edge. */\r\n    private borderright = 20;\r\n    /** is the curser grabbed? -> the map is moved */\r\n    private grabbed = false;\r\n    /** offset at which the map was grabbed in coordinates */\r\n    private grabbedCoord: Vector2D = { ...origin };\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n    private SCH: SlimeChunkHandler;\r\n\r\n    public constructor(id: string, seed?: string) {\r\n        const canvas = document.getElementById(id);\r\n        if (!canvas) {\r\n            throw (new Error(\"no canvas\"));\r\n        }\r\n        this.canvas = canvas as HTMLCanvasElement;\r\n        this.canvas.setAttribute(\"style\", \"cursor: grab; cursor: -webkit-grab\");\r\n        const ctx = this.canvas.getContext(\"2d\");\r\n        this.ctx = ctx ? ctx : new CanvasRenderingContext2D();\r\n        this.assertEventHandlers();\r\n\r\n        this.seed = !!seed ? fromString(seed) : new Long(Date.now());\r\n        this.SCH = new SlimeChunkHandler(this.seed);\r\n        this.update();\r\n        this.drawStaticUI();\r\n        this.vp = this.calcViewport();\r\n        this.chunkvp = this.chunkviewport();\r\n        this.redraw();\r\n\r\n        this.canvas.onmousemove = (event: MouseEvent) => {\r\n            this.mousePos = { x: event.clientX, y: event.clientY };\r\n            if (event.buttons === 1) {\r\n                this.xPos -= event.movementX;\r\n                this.yPos -= event.movementY;\r\n                this.redraw();\r\n            } else {\r\n                this.clearfooter();\r\n                this.drawFooter();\r\n            }\r\n        };\r\n\r\n        this.canvas.onmousedown = (_event: MouseEvent) => {\r\n            const vec = this.getMapCoord(this.mousePos);\r\n            if (vec) {\r\n                this.grabbed = true;\r\n                this.canvas.setAttribute(\"style\", \"cursor: grabbing; cursor: -webkit-grabbing\");\r\n                this.grabbedCoord = vec;\r\n            }\r\n        };\r\n\r\n        this.canvas.onmouseup = (_event: MouseEvent) => {\r\n            this.canvas.setAttribute(\"style\", \"cursor: grab; cursor: -webkit-grab\");\r\n            this.grabbed = false;\r\n        };\r\n    }\r\n\r\n    public gotoCoordinate(coordinate: Vector2D) {\r\n        this.xPos = coordinate.x * this.zoom;\r\n        this.yPos = coordinate.y * this.zoom;\r\n        this.redraw();\r\n    }\r\n\r\n    private assertEventHandlers() {\r\n        const mousewheelevt = (/Firefox/i.test(navigator.userAgent)) ? \"DOMMouseScroll\" : \"mousewheel\"; //FF doesn't recognize mousewheel as of FF3.x\r\n        const evt = (e) => this.onscroll(e);\r\n\r\n        if ((this.canvas as any).attachEvent) {//if IE (and Opera depending on user setting)\r\n            (this.canvas as any).attachEvent(\"on\" + mousewheelevt, evt);\r\n        }\r\n        else if (this.canvas.addEventListener) {//WC3 browsers\r\n            this.canvas.addEventListener(mousewheelevt, evt, false);\r\n        }\r\n    }\r\n\r\n    private onscroll(event: WheelEvent) {\r\n        if (this.getMapCoord(this.mousePos)) {\r\n            event.preventDefault();\r\n            let zoomfactor = 0.2;\r\n            if (this.zoom < 2) {\r\n                zoomfactor /= 2;\r\n            }\r\n            if (event.wheelDelta < 0) {\r\n                zoomfactor *= - 1;\r\n            }\r\n            else if (event.detail < 0) {\r\n                zoomfactor *= - 1;\r\n            }\r\n            if ((this.zoom + zoomfactor) >= this.minzoom && (this.zoom + zoomfactor) <= this.maxzoom) {\r\n                this.xPos += ((this.xPos) / this.zoom) * zoomfactor;\r\n                this.yPos += ((this.yPos) / this.zoom) * zoomfactor;\r\n                this.zoom += zoomfactor;\r\n                this.redraw();\r\n            }\r\n        }\r\n    }\r\n\r\n    private chunkviewport(): AABB {\r\n        return {\r\n            x1: Math.floor(this.vp.x1 / 16) - this.chunkbuffer,\r\n            y1: Math.floor(this.vp.y1 / 16) - this.chunkbuffer,\r\n            x2: Math.ceil(this.vp.x2 / 16) + this.chunkbuffer,\r\n            y2: Math.ceil(this.vp.y2 / 16) + this.chunkbuffer\r\n        };\r\n    }\r\n\r\n    private update() {\r\n        this.vp = this.calcViewport();\r\n        this.width = this.canvas.width;\r\n        this.height = this.canvas.height;\r\n    }\r\n\r\n    private drawFooter() {\r\n        const vec = this.getMapCoord(this.mousePos);\r\n        if (vec) {\r\n            this.ctx.font = \"15px MyriadPro sans-serif\";\r\n            this.ctx.fillStyle = \"#000000\";\r\n            this.ctx.fillText(\"X: \" + vec.x.toFixed(0) + \"\\t Z: \" + vec.y.toFixed(0), this.borderleft, this.height - this.borderbottom + 15);\r\n\r\n            const Chunk = { ...origin };\r\n            Chunk.x = Math.floor(vec.x / 16);\r\n            Chunk.y = Math.floor(vec.y / 16);\r\n            const Slimes = this.SCH.isSlimeChunk(Chunk) ? \"ja\" : \"nein\";\r\n            this.ctx.fillText(\"Slimes: \" + Slimes, this.borderleft + 200, this.height - this.borderbottom + 15);\r\n\r\n            const From = { ...Chunk };\r\n            From.x *= 16;\r\n            From.y *= 16;\r\n            const To = { ...From };\r\n            To.x += 15;\r\n            To.y += 15;\r\n\r\n            this.ctx.textAlign = \"end\";\r\n            this.ctx.fillText(\"Chunk: ( \" + Chunk.x + \" / \" + Chunk.y + \" )  im Bereich von: ( \" +\r\n                From.x + \" / \" + From.y + \")  bis: ( \" +\r\n                To.x + \" / \" + To.y + \" )\", this.width - this.borderright, this.height - this.borderbottom + 15);\r\n            this.ctx.textAlign = \"start\";\r\n        }\r\n    }\r\n\r\n    private clearfooter() {\r\n        this.ctx.fillStyle = \"#CED4DE\";\r\n        this.ctx.fillRect(this.borderleft - 1, this.height - this.borderbottom, this.width - this.borderleft, this.borderbottom);\r\n    }\r\n\r\n    private redraw() {\r\n        this.vp = this.calcViewport();\r\n\r\n        //fill map\r\n        this.ctx.fillStyle = \"#e0e0e0\";\r\n        this.ctx.fillRect(this.borderleft, this.bordertop, this.width - this.borderleft - this.borderright, this.height - this.bordertop - this.borderbottom);\r\n\r\n        //UI\r\n        this.updateSlimeVP();\r\n        this.drawSlimeChunks();\r\n        this.drawStaticUI();\r\n        this.drawUI();\r\n        this.drawGrid();\r\n        this.clearBorderRight();\r\n        this.clearfooter();\r\n    }\r\n\r\n    private updateSlimeVP() {\r\n        if (JSON.stringify(this.chunkvp) !== JSON.stringify(this.chunkviewport())) {\r\n            this.chunkvp = this.chunkviewport();\r\n        }\r\n    }\r\n\r\n    private drawSlimeChunks() {\r\n        this.ctx.fillStyle = \"#44dd55\";\r\n\r\n        for (let x = this.chunkvp.x1; x < this.chunkvp.x2; x++) {\r\n            for (let y = this.chunkvp.y1; y < this.chunkvp.y2; y++) {\r\n                if (this.SCH.isSlimeChunk({ x, y })) {\r\n                    const vec = { x, y };\r\n                    vec.x *= 16;\r\n                    vec.y *= 16;\r\n\r\n                    let vec2 = this.getAbsCoord(vec);\r\n                    if (vec2) {\r\n                        this.ctx.fillRect(vec2.x + 1, vec2.y + 1, 16 * this.zoom - 1, 16 * this.zoom - 1);\r\n                        continue;\r\n                    }\r\n                    //slime chunk may be partially on map (overlap in x direction)\r\n                    vec2 = this.getAbsCoord({ x: vec.x + 16, y: vec.y });\r\n                    if (vec2) {\r\n                        this.ctx.fillRect(vec2.x - 16 * this.zoom, vec2.y, 16 * this.zoom - 1, 16 * this.zoom - 1);\r\n                        continue;\r\n                    }\r\n                    //slime chunk may be partially on map (overlap in y direction)\r\n                    vec2 = this.getAbsCoord({ x: vec.x, y: vec.y + 16 });\r\n                    if (vec2) {\r\n                        this.ctx.fillRect(vec2.x, vec2.y - 16 * this.zoom, 16 * this.zoom - 1, 16 * this.zoom - 1);\r\n                        continue;\r\n                    }\r\n                    //slime chunk may be partially on map (overlap in both directions)\r\n                    vec2 = this.getAbsCoord({ x: vec.x + 16, y: vec.y + 16 });\r\n                    if (vec2) {\r\n                        this.ctx.fillRect(vec2.x - 16 * this.zoom, vec2.y - 16 * this.zoom, 16 * this.zoom - 1, 16 * this.zoom - 1);\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawUI() {\r\n        let factor = 16;\r\n        if (this.zoom < 2) { factor *= 2; }\r\n        if (this.zoom < 0.9) { factor *= 2; }\r\n        this.ctx.font = \"12px MyriadPro\";\r\n        this.ctx.fillStyle = \"#000000\";\r\n        //X\r\n        for (let i = Math.ceil(this.vp.x1 / factor); i <= Math.floor(this.vp.x2 / factor); i++) {\r\n            const mark = i * factor;\r\n            let pos: Vector2D = { x: mark, y: this.vp.y1 };\r\n            pos = this.getAbsCoord(pos, true);\r\n            this.ctx.fillText(mark + \"\", pos.x - (mark.toString().length * 3), this.bordertop - 5);\r\n        }\r\n        //Z\r\n        for (let i = Math.ceil(this.vp.y1 / factor); i <= Math.floor(this.vp.y2 / factor); i++) {\r\n            const mark = i * factor;\r\n            let pos: Vector2D = { x: this.vp.x1, y: mark };\r\n            pos = this.getAbsCoord(pos, true);\r\n            this.ctx.fillText(mark + \"\", this.borderleft - 30, pos.y + 4);\r\n        }\r\n    }\r\n\r\n    private drawStaticUI() {\r\n        //clear;\r\n        this.ctx.fillStyle = \"#CED4DE\";\r\n        this.ctx.fillRect(0, 0, this.width, this.bordertop);\r\n        this.ctx.fillRect(0, 0, this.borderleft, this.height);\r\n\r\n        //Border\r\n        this.ctx.lineWidth = 1;\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = \"#000000\";\r\n        this.ctx.strokeStyle = \"#000000\";\r\n        this.ctx.moveTo(this.width - this.borderright, this.bordertop - 1);\r\n        this.ctx.lineTo(this.borderleft - 1, this.bordertop - 1);\r\n        this.ctx.lineTo(this.borderleft - 1, this.height - this.borderbottom);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n\r\n        this.ctx.strokeStyle = \"#333333\";\r\n        this.ctx.fillStyle = \"#333333\";\r\n        //North\r\n        this.ctx.lineWidth = 0.7;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(15, 5);\r\n        this.ctx.lineTo(5, 30);\r\n        this.ctx.lineTo(15, 20);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(15, 20);\r\n        this.ctx.lineTo(25, 30);\r\n        this.ctx.lineTo(15, 5);\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n        this.ctx.font = \"15px MyriadPro sans-serif\";\r\n        this.ctx.fillText(\"N\", 10, 40);\r\n        this.ctx.fillText(\"Seed: \" + this.seed.toString(), 40, 20);\r\n\r\n        //Axisnames\r\n        //X\r\n        this.ctx.font = \"20px MyriadPro\";\r\n        const mapwidthcenter = this.borderleft + ((this.width - this.borderleft - this.borderright) / 2);\r\n        this.ctx.fillText(\"X\", mapwidthcenter - 10, 20);\r\n        this.ctx.lineWidth = 0.4;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(mapwidthcenter + 5, 13);\r\n        this.ctx.lineTo(mapwidthcenter + 17, 13);\r\n        this.ctx.lineTo(mapwidthcenter + 14, 10);\r\n        this.ctx.stroke();\r\n        this.ctx.moveTo(mapwidthcenter + 17, 13);\r\n        this.ctx.lineTo(mapwidthcenter + 14, 16);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n        //Z\r\n        const mapheightcenter = this.bordertop + ((this.height - this.bordertop - this.borderbottom) / 2);\r\n        this.ctx.fillText(\"Z\", 7.5, mapheightcenter - 5);\r\n        this.ctx.lineWidth = 0.4;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(13, mapheightcenter);\r\n        this.ctx.lineTo(13, mapheightcenter + 12);\r\n        this.ctx.lineTo(10, mapheightcenter + 9);\r\n        this.ctx.stroke();\r\n        this.ctx.moveTo(13, mapheightcenter + 12);\r\n        this.ctx.lineTo(16, mapheightcenter + 9);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    private drawGrid() {\r\n        const factor = 16;\r\n        this.ctx.strokeStyle = \"#000000\";\r\n        //X\r\n        for (let i = Math.ceil(this.vp.x1 / factor); i <= Math.floor(this.vp.x2 / factor); i++) {\r\n            this.ctx.lineWidth = (i === 0) ? 0.8 : 0.5;\r\n            const mark = i * factor;\r\n            let pos: Vector2D = { x: mark, y: this.vp.y1 };\r\n            pos = this.getAbsCoord(pos, true);\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(pos.x, this.bordertop);\r\n            this.ctx.lineTo(pos.x, this.height - this.borderbottom);\r\n            this.ctx.stroke();\r\n            this.ctx.closePath();\r\n        }\r\n        //Z\r\n        for (let i = Math.ceil(this.vp.y1 / factor); i <= Math.floor(this.vp.y2 / factor); i++) {\r\n            this.ctx.lineWidth = (i === 0) ? 0.8 : 0.5;\r\n            const mark = i * factor;\r\n            let pos: Vector2D = { x: this.vp.x1, y: mark };\r\n            pos = this.getAbsCoord(pos, true);\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(this.borderleft, pos.y);\r\n            this.ctx.lineTo(this.width - this.borderright, pos.y);\r\n            this.ctx.stroke();\r\n            this.ctx.closePath();\r\n        }\r\n    }\r\n\r\n    private clearBorderRight() {\r\n        this.ctx.fillStyle = \"#CED4DE\";\r\n        this.ctx.fillRect(this.width - this.borderright, 0, this.borderright, this.height);\r\n    }\r\n\r\n    private isInVP(vec: Vector2D): boolean {\r\n        return (vec.x >= this.vp.x1 && vec.x <= this.vp.x2 &&\r\n            vec.y >= this.vp.y1 && vec.y <= this.vp.y2);\r\n    }\r\n\r\n    private isOverMap(vec: Vector2D): boolean {\r\n        return (\r\n            vec.x >= this.borderleft && vec.x <= (this.width - this.borderright) &&\r\n            vec.y >= this.bordertop && vec.y <= (this.height - this.borderbottom));\r\n    }\r\n\r\n    private getAbsCoord(vec: Vector2D): false | Vector2D;\r\n    private getAbsCoord(vec: Vector2D, ignoreBorder: true): Vector2D;\r\n    private getAbsCoord(vec: Vector2D, ignoreBorder: boolean = false): false | Vector2D {\r\n        if (this.isInVP(vec) || ignoreBorder) {\r\n            const vec2 = { ...origin };\r\n            vec2.x = ((Math.floor(vec.x) - this.vp.x1) * this.zoom) + this.borderleft;\r\n            vec2.y = ((Math.floor(vec.y) - this.vp.y1) * this.zoom) + this.bordertop;\r\n            return vec2;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private getMapCoord(vec: Vector2D): false | Vector2D {\r\n        if (this.isOverMap(vec)) {\r\n            const vec2: Vector2D = { ...origin };\r\n            vec2.x = Math.round((vec.x - this.borderleft) / this.zoom);\r\n            vec2.y = Math.round((vec.y - this.bordertop) / this.zoom);\r\n            vec2.x += this.vp.x1;\r\n            vec2.y += this.vp.y1;\r\n            return vec2;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private calcViewport(): AABB {\r\n        const v: Partial<AABB> = {};\r\n        const mapWidth = this.width - this.borderleft - this.borderright;\r\n        const mapHeight = this.height - this.bordertop - this.borderbottom;\r\n        v.x1 = Math.floor((this.xPos - (mapWidth / 2)) / this.zoom);\r\n        v.y1 = Math.floor((this.yPos - (mapHeight / 2)) / this.zoom);\r\n        v.x2 = Math.ceil((this.xPos + (mapWidth / 2)) / this.zoom);\r\n        v.y2 = Math.ceil((this.yPos + (mapHeight / 2)) / this.zoom);\r\n        return v as AABB;\r\n    }\r\n\r\n    /**\r\n     * takes a number, vector or area and applies the given (arithmetic) function to each value.\r\n     */\r\n    private doMath(number: number, f: (x: number) => number): number;\r\n    private doMath(vec: Vector2D, f: (x: number) => number): Vector2D;\r\n    private doMath(area: AABB, f: (x: number) => number): AABB;\r\n    private doMath(arg: number | Vector2D | AABB, f: (x: number) => number): number | Vector2D | AABB;\r\n    private doMath(arg: number | Vector2D | AABB, f: (x: number) => number): number | Vector2D | AABB {\r\n        if (this.isVector2D(arg)) {\r\n            return {\r\n                x: this.doMath(arg.x, f),\r\n                y: this.doMath(arg.y, f)\r\n            };\r\n        }\r\n        else if (this.isAABB(arg)) {\r\n            const v2s = getV2sfromAABB(arg);\r\n            return getAABBfromV2s(this.doMath(v2s.p1, f), this.doMath(v2s.p2, f));\r\n        }\r\n        return f(arg);\r\n    }\r\n\r\n    public ChunkToCoord(number: number): number;\r\n    public ChunkToCoord(vec: Vector2D): Vector2D;\r\n    public ChunkToCoord(area: AABB): AABB;\r\n    public ChunkToCoord(arg: number | Vector2D | AABB): number | Vector2D | AABB {\r\n        return this.doMath(arg, x => x * 16);\r\n    }\r\n\r\n    private isVector2D(vec: any): vec is Vector2D {\r\n        if (typeof vec !== \"object\") {\r\n            return false;\r\n        }\r\n        const keys = Object.keys(vec);\r\n        return keys.length === 2 /*&& keys.hasOwnProperty(\"x\") && keys.hasOwnProperty(\"y\")*/;\r\n    }\r\n\r\n    private isAABB(vec: any): vec is AABB {\r\n        if (typeof vec !== \"object\") {\r\n            return false;\r\n        }\r\n        const keys = Object.keys(vec);\r\n        return keys.length === 4 /*&& keys.hasOwnProperty(\"x1\") && keys.hasOwnProperty(\"y1\") && keys.hasOwnProperty(\"x2\") && keys.hasOwnProperty(\"y2\")*/;\r\n    }\r\n\r\n}\r\n\r\n(window as any).SlimeMap = SlimeMap;\r\n","import Long from \"long\";\r\nimport { NSeededRandom } from \"./seededRandom\";\r\nimport { Vector2D } from \"./slimeMap\";\r\n\r\nconst base = new Long(4987142);\r\nconst addend1 = new Long(5947611);\r\nconst addend2 = new Long(4392871);\r\nconst addend3 = new Long(389711);\r\nconst mask = new Long(987234911);\r\n\r\nexport class SlimeChunkHandler {\r\n    private cache: { [key: string]: boolean | undefined } = {};\r\n\r\n    public constructor(private seed: Long) { }\r\n\r\n    public isSlimeChunk(chunk: Vector2D) {\r\n        const key = `[${chunk.x},${chunk.y}]`;\r\n        if (this.cache[key] === undefined) {\r\n            this.cache[key] = isSlimeChunk(chunk, this.seed);\r\n        }\r\n        return this.cache[key];\r\n    }\r\n\r\n    public updateSeed(seed: Long) {\r\n        this.seed = seed;\r\n        delete this.cache;\r\n        this.cache = {};\r\n    }\r\n}\r\n\r\nexport function isSlimeChunk(chunk: Vector2D, seed: Long) {\r\n    const xPos = chunk.x;\r\n    const zPos = chunk.y;\r\n    const tempseed = base.multiply(xPos).multiply(xPos)\r\n        .add(addend1.multiply(xPos))\r\n        .add(addend2.multiply(zPos).multiply(zPos))\r\n        .add(addend3.multiply(zPos))\r\n        .add(seed).xor(mask);\r\n\r\n    const rnd = new NSeededRandom(tempseed);\r\n    return (rnd.nextInt(10) === 0);\r\n}\r\n","import Long, { ONE, ZERO } from \"long\";\r\n\r\ninterface ISeededRandom {\r\n    nextInt: (b: number) => number;\r\n}\r\n\r\nconst nmultiplier = new Long(0xDEECE66D, 0x5);\r\nconst naddend = new Long(0xB);\r\nconst nmask = new Long(0xFFFFFFFF, 0xFFFF);\r\n\r\nexport class NSeededRandom implements ISeededRandom {\r\n    private seed: Long;\r\n\r\n    public constructor(initseed: Long) {\r\n        this.seed = this.initialScramble(initseed);\r\n    }\r\n\r\n    private initialScramble(seed: Long) {\r\n        return seed.xor(nmultiplier).and(nmask);\r\n    }\r\n\r\n    private next(bits: number) {\r\n        this.seed = this.seed.multiply(nmultiplier).add(naddend).and(nmask);\r\n        return this.seed.shiftRight(48 - bits);\r\n    }\r\n\r\n    public nextInt(b: number) {\r\n        const bound = new Long(Math.abs(b));\r\n        if (bound.and(bound.negate()).isZero()) { // i.e., bound is a power of 2\r\n            return (bound.multiply(this.next(31)).shiftRight(31)).toInt();\r\n        }\r\n        // tslint:disable-next-line:one-variable-per-declaration\r\n        let bits: Long, val: Long;\r\n        do {\r\n            bits = this.next(31);\r\n            val = bits.modulo(bound);\r\n        } while (bits.sub(val).add(bound.sub(ONE)).lessThan(ZERO));\r\n        return val.toInt();\r\n    }\r\n}\r\n"],"sourceRoot":""}