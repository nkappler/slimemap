/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/slimeMap.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/BigInteger.js":
/*!***************************!*\
  !*** ./src/BigInteger.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar bigInt = (function () {\r\n    var base = 10000000, logBase = 7, zeros = \"0000000\";\r\n    var sign = {\r\n        positive: false,\r\n        negative: true\r\n    };\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n    }\r\n\r\n    function trim(value) {\r\n        while (value[value.length - 1] === 0 && value.length > 1) value.pop();\r\n        return value;\r\n    }\r\n\r\n    function fastAdd(a, b) {\r\n        var sign = b < 0;\r\n        if (a.sign !== sign) {\r\n            if(sign) return fastSubtract(a.abs(), -b);\r\n            return fastSubtract(a.abs(), b).negate();\r\n        }\r\n        if (sign) b = -b;\r\n        var value = a.value,\r\n            result = [],\r\n            carry = 0;\r\n        for (var i = 0; i < value.length || carry > 0; i++) {\r\n            var sum = (value[i] || 0) + (i > 0 ? 0 : b) + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            result.push(sum % base);\r\n        }\r\n        return new BigInteger(trim(result), a.sign);\r\n    }\r\n\r\n    function fastSubtract(a, b) {\r\n        var value = a.value;\r\n        if (value.length === 1) {\r\n            value = value[0];\r\n            if (a.sign) value = -value;\r\n            return new BigInteger([Math.abs(value - b)], (value - b) < 0);\r\n        }\r\n        if (a.sign !== (b < 0)) return fastAdd(a, -b);\r\n        var sign = false;\r\n        if (a.sign) sign = true;\r\n        if (value.length === 1 && value[0] < b) return new BigInteger([b - value[0]], !sign);\r\n        if (sign) b = -b;\r\n        var result = [],\r\n            borrow = 0;\r\n        for (var i = 0; i < value.length; i++) {\r\n            var tmp = value[i] - borrow - (i > 0 ? 0 : b);\r\n            borrow = tmp < 0 ? 1 : 0;\r\n            result.push((borrow * base) + tmp);\r\n        }\r\n\r\n        return new BigInteger(trim(result), sign);\r\n    }\r\n\r\n    function fastMultiplyInternal(value, lambda) {\r\n        var result = [];\r\n        var carry = 0;\r\n        for (var i = 0; i < value.length; i++) {\r\n            carry += lambda * value[i];\r\n            var q = Math.floor(carry / base);\r\n            result[i] = (carry - q * base) | 0;\r\n            carry = q;\r\n        }\r\n        result[value.length] = carry | 0;\r\n        return result;\r\n    }\r\n\r\n    function fastMultiply(a, b) {\r\n        var result = fastMultiplyInternal(a.value, b < 0 ? -b : b);\r\n        return new BigInteger(trim(result), b < 0 ? !a.sign : a.sign);\r\n    }\r\n\r\n    function fastDivModInternal(value, lambda) {\r\n        var quotient = [];\r\n        for (var i = 0; i < value.length; i++) {\r\n            quotient[i] = 0;\r\n        }\r\n        var remainder = 0;\r\n        for (var i = value.length - 1; i >= 0; i--) {\r\n            var divisor = remainder * base + value[i];\r\n            var q = Math.floor(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return {\r\n          quotient: quotient,\r\n          remainder: remainder | 0\r\n        };\r\n    }\r\n\r\n    function fastDivMod(a, b) {\r\n        if (b === 0) throw new Error(\"Cannot divide by zero.\");\r\n        var result = fastDivModInternal(a.value, b < 0 ? -b : b);\r\n        return {\r\n            quotient: new BigInteger(trim(result.quotient), b < 0 ? !a.sign : a.sign),\r\n            remainder: new BigInteger([result.remainder], a.sign)\r\n        };\r\n    }\r\n\r\n    function isSmall(n) {\r\n        return ((typeof n === \"number\" || typeof n === \"string\") && +Math.abs(n) <= base) ||\r\n            (n instanceof BigInteger && n.value.length <= 1);\r\n    }\r\n    \r\n    function fromTwosComp(twosComp) {\r\n    \tvar sign = (parseInt(twosComp[0]) == 1);\r\n    \tvar result = twosComp.substr(1);\r\n    \tif (sign) {\r\n    \t\tvar i = result.length;\r\n    \t\twhile (i >= 0) {\r\n    \t\t\ti--;\r\n    \t\t\tif (result[i + 1] == 1) break;\r\n    \t\t}\r\n    \t\tfor (var j = i; j >= 0; j--) \r\n    \t\t\tresult = result.substr(0, j) + Math.abs(result[j] - 1) + result.substr(j + 1);\r\n    \t}\r\n    \tvar value = bigInt.zero;\r\n    \tvar exp = 0;\r\n    \tfor (var i = result.length - 1; i >= 0; i--) {\r\n    \t\tif (parseInt(result[i]) == 1) {\r\n    \t\t\tvar addend = bigInt.one;\r\n    \t\t\tvar help = exp;\r\n    \t\t\twhile (help > 0) {\r\n    \t\t\t\taddend = addend.multiply(new BigInteger([2]));\r\n    \t\t\t\thelp--;\r\n    \t\t\t}\r\n    \t\t\tvalue = value.add(addend);\r\n    \t\t}\r\n    \t\texp++;\r\n    \t}\r\n    \tif (sign) value = value.negate();\r\n    \treturn value;\r\n    }\r\n    \r\n    function getTwosComp(bI, bits) {\t\t\r\n    \tvar posString = bI.abs().toString(2);\t\r\n    \tvar minbits = posString.length + 2; \t//+2 because of miscalculations when bitcount is exceeded, e.g. when calling .TwosCompNot(15)\r\n    \t\t\t\t\t\t\t\t\t\t\t// result without '+2' would be 0 instead of -16, which isn't incorrect, but in Java and other cases,\r\n    \t\t\t\t\t\t\t\t\t\t\t// where 32/64 bits are used, -16 would be the result and thus this wouldn't meet expectations.\r\n    \t\r\n    \tif (bits === undefined) bits = minbits;\r\n    \t\r\n    \tvar result = \"\";\r\n    \tvar count = 0;\r\n    \t\r\n\t\tfor (var i = posString.length - 1; i >= 0; i--)  {\r\n\t\t\tif (count >= bits) break;\r\n\t\t\tresult = posString[i] + result;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tfor (var i = bits-posString.length - 1; i >= 0; i--) {\r\n\t\t\tif (count >= bits) break;\r\n\t\t\tresult = \"0\" + result;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\t\r\n    \tif (bI.isNegative()) {\r\n    \t\tvar i = bits-1;\r\n    \t\twhile (i > 0) {\r\n    \t\t\ti--;\r\n    \t\t\tif (parseInt(result[i + 1]) == 1) break;\r\n    \t\t}\r\n    \t\tfor (var j = i; j >= 0; j--) \r\n    \t\t\tresult = result.substr(0, j) + ((parseInt(result[j]) + 1) % 2) + result.substr(j + 1);\r\n    \t}\r\n    \t\r\n    \treturn result;\r\n    }\r\n\r\n    BigInteger.prototype.toTwosComp = function(bits) {\r\n    \treturn getTwosComp(this, bits);\r\n    };\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, sign.positive);\r\n    };\r\n    BigInteger.prototype.add = function (n) {\r\n        if(isSmall(n)) return fastAdd(this, +n);\r\n        n = parseInput(n);\r\n        if (this.sign !== n.sign) {\r\n            if (this.sign === sign.positive) return this.abs().subtract(n.abs());\r\n            return n.abs().subtract(this.abs());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        var result = [],\r\n            carry = 0,\r\n            length = Math.max(a.length, b.length);\r\n        for (var i = 0; i < length || carry > 0; i++) {\r\n            var sum = (a[i] || 0) + (b[i] || 0) + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            result.push(sum % base);\r\n        }\r\n        return new BigInteger(trim(result), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    BigInteger.prototype.subtract = function (n) {\r\n        if (isSmall(n)) return fastSubtract(this, +n);\r\n        n = parseInput(n);\r\n        if (this.sign !== n.sign) return this.add(n.negate());\r\n        if (this.sign === sign.negative) return n.negate().subtract(this.negate());\r\n        if (this.compare(n) < 0) return n.subtract(this).negate();\r\n        var a = this.value, b = n.value;\r\n        var result = [],\r\n            borrow = 0,\r\n            length = Math.max(a.length, b.length);\r\n        for (var i = 0; i < length; i++) {\r\n            var ai = a[i] || 0, bi = b[i] || 0;\r\n            var tmp = ai - borrow;\r\n            borrow = tmp < bi ? 1 : 0;\r\n            result.push((borrow * base) + tmp - bi);\r\n        }\r\n        return new BigInteger(trim(result), sign.positive);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    BigInteger.prototype.multiply = function (n) {\r\n        if (isSmall(n)) return fastMultiply(this, +n);\r\n        n = parseInput(n);\r\n        var sign = this.sign !== n.sign;\r\n\r\n        var a = this.value, b = n.value;\r\n        var result = [];\r\n        for (var i = a.length + b.length; i > 0; i--) {\r\n            result.push(0);\r\n        }\r\n        for (var i = 0; i < a.length; i++) {\r\n            var x = a[i];\r\n            for (var j = 0; j < b.length; j++) {\r\n                var y = b[j];\r\n                var product = x * y + result[i+j];\r\n                var q = Math.floor(product / base);\r\n                result[i+j] = product - q * base;\r\n                result[i+j+1] += q;\r\n            }\r\n        }\r\n        return new BigInteger(trim(result), sign);\r\n    };\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    BigInteger.prototype.divmod = function (n) {\r\n        if (isSmall(n)) return fastDivMod(this, +n);\r\n        n = parseInput(n);\r\n        var quotientSign = this.sign !== n.sign;\r\n        if (n.equals(ZERO)) throw new Error(\"Cannot divide by zero\");\r\n        if (this.equals(ZERO)) return {\r\n            quotient: new BigInteger([0], sign.positive),\r\n            remainder: new BigInteger([0], sign.positive)\r\n        };\r\n        var a = this.value, b = n.value;\r\n        var result = [0];\r\n        for (var i = 0; i < b.length; i++) {\r\n            result[i] = 0;\r\n        }\r\n        var divisorMostSignificantDigit = b[b.length - 1];\r\n        // normalization\r\n        var lambda = Math.ceil(base / 2 / divisorMostSignificantDigit);\r\n        var remainder = fastMultiplyInternal(a, lambda);\r\n        var divisor = fastMultiplyInternal(b, lambda);\r\n        divisorMostSignificantDigit = divisor[b.length - 1];\r\n        for (var shift = a.length - b.length; shift >= 0; shift--) {\r\n            var quotientDigit = base - 1;\r\n            if (remainder[shift + b.length] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b.length] * base + remainder[shift + b.length - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // remainder -= quotientDigit * divisor\r\n            var carry = 0;\r\n            var borrow = 0;\r\n            for (var i = 0; i < divisor.length; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                var q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = (borrow + base) | 0;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow | 0;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                var carry = 0;\r\n                for (var i = 0; i < divisor.length; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = (carry + base) | 0;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry | 0;\r\n                        carry = +1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit | 0;\r\n        }\r\n        // denormalization\r\n        remainder = fastDivModInternal(remainder, lambda).quotient;\r\n        return {\r\n            quotient: new BigInteger(trim(result), quotientSign),\r\n            remainder: new BigInteger(trim(remainder), this.sign)\r\n        };\r\n    };\r\n    BigInteger.prototype.divide = function (n) {\r\n        return this.divmod(n).quotient;\r\n    };\r\n    BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (n) {\r\n        return this.divmod(n).remainder;\r\n    };\r\n    BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (n) {\r\n        n = parseInput(n);\r\n        var a = this, b = n, r = ONE;\r\n        if (b.equals(ZERO)) return r;\r\n        if (a.equals(ZERO) || b.lesser(ZERO)) return ZERO;\r\n        while (true) {\r\n            if (b.isOdd()) {\r\n                r = r.times(a);\r\n            }\r\n            b = b.divide(2);\r\n            if (b.equals(ZERO)) break;\r\n            a = a.times(a);\r\n        }\r\n        return r;\r\n    };\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseInput(exp);\r\n        mod = parseInput(mod);\r\n        if (mod.equals(ZERO)) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = ONE,\r\n            base = this.mod(mod);\r\n        if (base.equals(ZERO)) return ZERO;\r\n        while (exp.greater(0)) {\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    BigInteger.prototype.square = function () {\r\n        return this.multiply(this);\r\n    };\r\n    function gcd(a, b) {\r\n        a = parseInput(a).abs();\r\n        b = parseInput(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.equals(ZERO)) return b;\r\n        if (b.equals(ZERO)) return a;\r\n        if (a.isEven()) {\r\n            if (b.isOdd()) {\r\n                return gcd(a.divide(2), b);\r\n            }\r\n            return gcd(a.divide(2), b.divide(2)).multiply(2);\r\n        }\r\n        if (b.isEven()) {\r\n            return gcd(a, b.divide(2));\r\n        }\r\n        if (a.greater(b)) {\r\n            return gcd(a.subtract(b).divide(2), b);\r\n        }\r\n        return gcd(b.subtract(a).divide(2), a);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseInput(a).abs();\r\n        b = parseInput(b).abs();\r\n        return a.multiply(b).divide(gcd(a, b));\r\n    }\r\n    BigInteger.prototype.next = function () {\r\n        return fastAdd(this, 1);\r\n    };\r\n    BigInteger.prototype.prev = function () {\r\n        return fastSubtract(this, 1);\r\n    };\r\n    BigInteger.prototype.compare = function (n) {\r\n        var first = this, second = parseInput(n);\r\n        if (first.value.length === 1 && second.value.length === 1 && first.value[0] === 0 && second.value[0] === 0) return 0;\r\n        if (second.sign !== first.sign) return first.sign === sign.positive ? 1 : -1;\r\n        var multiplier = first.sign === sign.positive ? 1 : -1;\r\n        var a = first.value, b = second.value,\r\n            length = Math.max(a.length, b.length) - 1;\r\n        for (var i = length; i >= 0; i--) {\r\n            var ai = (a[i] || 0), bi = (b[i] || 0);\r\n            if (ai > bi) return 1 * multiplier;\r\n            if (bi > ai) return -1 * multiplier;\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    BigInteger.prototype.compareAbs = function (n) {\r\n        return this.abs().compare(n.abs());\r\n    };\r\n    BigInteger.prototype.equals = function (n) {\r\n        return this.compare(n) === 0;\r\n    };\r\n    BigInteger.prototype.notEquals = function (n) {\r\n        return !this.equals(n);\r\n    };\r\n    BigInteger.prototype.lesser = function (n) {\r\n        return this.compare(n) < 0;\r\n    };\r\n    BigInteger.prototype.greater = function (n) {\r\n        return this.compare(n) > 0;\r\n    };\r\n    BigInteger.prototype.greaterOrEquals = function (n) {\r\n        return this.compare(n) >= 0;\r\n    };\r\n    BigInteger.prototype.lesserOrEquals = function (n) {\r\n        return this.compare(n) <= 0;\r\n    };\r\n\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n    BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n    BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n    BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n    BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n    BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n    BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    function max (a, b) {\r\n        a = parseInput(a);\r\n        b = parseInput(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min (a, b) {\r\n        a = parseInput(a);\r\n        b = parseInput(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    BigInteger.prototype.isPositive = function () {\r\n        if (this.value.length === 1 && this.value[0] === 0) return false;\r\n        return this.sign === sign.positive;\r\n    };\r\n    BigInteger.prototype.isNegative = function () {\r\n        if (this.value.length === 1 && this.value[0] === 0) return false;\r\n        return this.sign === sign.negative;\r\n    };\r\n    BigInteger.prototype.isEven = function () {\r\n        return this.value[0] % 2 === 0;\r\n    };\r\n    BigInteger.prototype.isOdd = function () {\r\n        return this.value[0] % 2 === 1;\r\n    };\r\n    BigInteger.prototype.isUnit = function () {\r\n        return this.value.length === 1 && this.value[0] === 1;\r\n    };\r\n    BigInteger.prototype.isZero = function () {\r\n        return this.value.length === 1 && this.value[0] === 0;\r\n    };\r\n    BigInteger.prototype.isDivisibleBy = function (n) {\r\n        n = parseInput(n);\r\n        if (n.isZero()) return false;\r\n        return this.mod(n).equals(ZERO);\r\n    };\r\n    BigInteger.prototype.isPrime = function () {\r\n        var n = this.abs(),\r\n            nPrev = n.prev();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(25)) return true;\r\n        var a = [2, 3, 5, 7, 11, 13, 17, 19],\r\n            b = nPrev,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2);\r\n        for (i = 0; i < a.length; i++) {\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.equals(ONE) || x.equals(nPrev)) continue;\r\n            for (t = true, d = b; t && d.lesser(nPrev); d = d.multiply(2)) {\r\n                x = x.square().mod(n);\r\n                if (x.equals(nPrev)) t = false;\r\n            }\r\n            if (t) return false;\r\n        }\r\n        return true;\r\n    };\r\n    function randBetween (a, b) {\r\n        a = parseInput(a);\r\n        b = parseInput(b);\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low);\r\n        var length = range.value.length - 1;\r\n        var result = [], restricted = true;\r\n        for (var i = length; i >= 0; i--) {\r\n            var top = restricted ? range.value[i] : base;\r\n            var digit = Math.floor(Math.random() * top);\r\n            result.unshift(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(new BigInteger(result, false));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (powersOfTwo[powersOfTwo.length - 1] <= base) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    BigInteger.prototype.shiftLeft = function (n) {\r\n        if (!isSmall(n)) {\r\n            if (n.isNegative()) return this.shiftRight(n.abs());\r\n            return this.times(bigInt(2).pow(n));\r\n        }\r\n        n = +n;\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            result = fastMultiply(result, highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return fastMultiply(result, powersOfTwo[n]);\r\n    };\r\n\r\n    BigInteger.prototype.shiftRight = function (n) {\r\n        if (!isSmall(n)) {\r\n            if (n.isNegative()) return this.shiftLeft(n.abs());\r\n            return this.over(bigInt(2).pow(n));\r\n        }\r\n        n = +n;\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.equals(ZERO)) return result;\r\n            result = fastDivMod(result, highestPower2).quotient;\r\n            n -= powers2Length - 1;\r\n        }\r\n        return fastDivMod(result, powersOfTwo[n]).quotient;\r\n    };\r\n\r\n    // Reference: http://en.wikipedia.org/wiki/Bitwise_operation#Mathematical_equivalents\r\n    function bitwise(x, y, fn) {\r\n        var sum = ZERO;\r\n        var limit = max(x.abs(), y.abs());\r\n        var n = 0, _2n = ONE;\r\n        while (_2n.lesserOrEquals(limit)) {\r\n            var xMod, yMod;\r\n            xMod = x.over(_2n).isEven() ? 0 : 1;\r\n            yMod = y.over(_2n).isEven() ? 0 : 1;\r\n\r\n            sum = sum.add(_2n.times(fn(xMod, yMod)));\r\n\r\n            _2n = fastMultiply(_2n, 2);\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        var body = bitwise(this, this, function (xMod) { return (xMod + 1) % 2; });\r\n        return !this.sign ? body.negate() : body;\r\n    };\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        n = parseInput(n);\r\n        var body = bitwise(this, n, function (xMod, yMod) { return xMod * yMod; });\r\n        return this.sign && n.sign ? body.negate() : body;\r\n    };\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        n = parseInput(n);\r\n        var body = bitwise(this, n, function (xMod, yMod) { return (xMod + yMod + xMod * yMod) % 2; });\r\n        return this.sign || n.sign ? body.negate() : body;\r\n    };\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        n = parseInput(n);\r\n        var body = bitwise(this, n, function (xMod, yMod) { return (xMod + yMod) % 2; });\r\n        return this.sign ^ n.sign ? body.negate() : body;\r\n    };\r\n    \r\n    \r\n    function TwosCompBitWise(x, y, fn, bits) {\r\n    \t//both 2Complements need equal many bits\r\n    \tvar bitCount = 0;\r\n    \tif (x.abs().greaterOrEquals(y.abs())) {\r\n    \t\tx = x.toTwosComp(bits);\r\n    \t\tbitCount = x.length;\r\n    \t\ty = y.toTwosComp(bitCount);\r\n    \t} else {\r\n    \t\ty = y.toTwosComp(bits);\r\n    \t\tbitCount = y.length;\r\n    \t\tx = x.toTwosComp(bitCount);\r\n    \t}\r\n    \t\r\n    \tvar result = \"\";\r\n    \tfor (var i = 0; i < bitCount; i++) {\r\n    \t\tvar a = parseInt(x[i]);\r\n    \t\tvar b = parseInt(y[i]);\r\n    \t\tresult += fn(a, b);\r\n    \t}\r\n    \t    \t\r\n    \treturn fromTwosComp(result);\r\n    }\r\n    \r\n    BigInteger.prototype.TwosCompNot = function (bits) {\r\n    \treturn TwosCompBitWise(this, this, function(a, b) { return (a + 1) % 2; }, bits);\r\n    };\r\n    \r\n    BigInteger.prototype.TwosCompAnd = function (n, bits) {\r\n    \treturn TwosCompBitWise(this, n, function(a, b) { return (a * b); }, bits);\r\n    };\r\n    \r\n    BigInteger.prototype.TwosCompOr  = function (n, bits) {\r\n    \treturn TwosCompBitWise(this, n, function(a, b) { return (a + b + a * b) % 2; }, bits);\r\n    };\r\n    \r\n    BigInteger.prototype.TwosCompXor = function (n, bits) {\r\n    \treturn TwosCompBitWise(this, n, function(a, b) { return (a + b) % 2; }, bits);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix) {\r\n        if (radix === undefined) {\r\n            radix = 10;\r\n        }\r\n        if (radix !== 10) return toBase(this, radix);\r\n        var first = this;\r\n        var str = \"\", len = first.value.length;\r\n        if (len === 0 || (len === 1 && first.value[0] === 0)) {\r\n            return \"0\";\r\n        }\r\n        len -= 1;\r\n        str = first.value[len].toString();\r\n        while (--len >= 0) {\r\n            var digit = first.value[len].toString();\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var s = first.sign === sign.positive ? \"\" : \"-\";\r\n        return s + str;\r\n    };\r\n    BigInteger.prototype.toJSNumber = function () {\r\n        return this.valueOf();\r\n    };\r\n    BigInteger.prototype.valueOf = function () {\r\n        if (this.value.length === 1) return this.sign ? -this.value[0] : this.value[0];\r\n        return +this.toString();\r\n    };\r\n\r\n    var ZERO = new BigInteger([0], sign.positive);\r\n    var ONE = new BigInteger([1], sign.positive);\r\n    var MINUS_ONE = new BigInteger([1], sign.negative);\r\n\r\n\r\n    function parseInput(text) {\r\n        if (text instanceof BigInteger) return text;\r\n        if (Math.abs(+text) < base && +text === (+text | 0)) {\r\n            var value = +text;\r\n            return new BigInteger([Math.abs(value)], (value < 0 || (1 / value) === -Infinity));\r\n        }\r\n        text += \"\";\r\n        var s = sign.positive, value = [];\r\n        if (text[0] === \"-\") {\r\n            s = sign.negative;\r\n            text = text.slice(1);\r\n        }\r\n        var text = text.split(/e/i);\r\n        if (text.length > 2) throw new Error(\"Invalid integer: \" + text.join(\"e\"));\r\n        if (text[1]) {\r\n            var exp = text[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = parseInput(exp);\r\n            var decimalPlace = text[0].indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp = exp.minus(text[0].length - decimalPlace);\r\n                text[0] = text[0].slice(0, decimalPlace) + text[0].slice(decimalPlace + 1);\r\n            }\r\n            if (exp.lesser(0)) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            while (exp.notEquals(0)) {\r\n                text[0] += \"0\";\r\n                exp = exp.prev();\r\n            }\r\n        }\r\n        text = text[0];\r\n        if (text === \"-0\") text = \"0\";\r\n        var isValid = /^([0-9][0-9]*)$/.test(text);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + text);\r\n        while (text.length) {\r\n            var divider = text.length > logBase ? text.length - logBase : 0;\r\n            value.push(+text.slice(divider));\r\n            text = text.slice(0, divider);\r\n        }\r\n        return new BigInteger(trim(value), s);\r\n    }\r\n\r\n    var parseBase = function (text, base) {\r\n        base = parseInput(base);\r\n        var val = ZERO;\r\n        var digits = [];\r\n        var i;\r\n        var isNegative = false;\r\n        function parseToken(text) {\r\n            var c = text[i].toLowerCase();\r\n            if (i === 0 && text[i] === \"-\") {\r\n                isNegative = true;\r\n                return;\r\n            }\r\n            if (/[0-9]/.test(c)) digits.push(parseInput(c));\r\n            else if (/[a-z]/.test(c)) digits.push(parseInput(c.charCodeAt(0) - 87));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\");\r\n                digits.push(parseInput(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        for (i = 0; i < text.length; i++) {\r\n            parseToken(text);\r\n        }\r\n        digits.reverse();\r\n        for (i = 0; i < digits.length; i++) {\r\n            val = val.add(digits[i].times(base.pow(i)));\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    };\r\n\r\n    function stringify(digit) {\r\n        var v = digit.value;\r\n        if (v.length === 1 && v[0] <= 36) {\r\n            return \"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(v[0]);\r\n        }\r\n        return \"<\" + v + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.equals(0)) {\r\n            if (n.equals(0)) return \"0\";\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.equals(0)) return \"0\";\r\n            if (n.lesser(0)) return Array(1 - n).join(\"10\");\r\n            return \"1\" + Array(+n).join(\"01\");\r\n        }\r\n        var minusSign = \"\";\r\n        if (n.isNegative() && base.isPositive()) {\r\n            minusSign = \"-\";\r\n            n = n.abs();\r\n        }\r\n        if (base.equals(1)) {\r\n            if (n.equals(0)) return \"0\";\r\n            return minusSign + Array(+n + 1).join(1);\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.lesser(0) || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.lesser(0)) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(stringify(digit));\r\n        }\r\n        out.push(stringify(left));\r\n        return minusSign + out.reverse().join(\"\");\r\n    }\r\n\r\n    var fnReturn = function (a, b) {\r\n        if (typeof a === \"undefined\") return ZERO;\r\n        if (typeof b !== \"undefined\") return parseBase(a, b);\r\n        return parseInput(a);\r\n    };\r\n    fnReturn.zero = ZERO;\r\n    fnReturn.one = ONE;\r\n    fnReturn.minusOne = MINUS_ONE;\r\n    fnReturn.randBetween = randBetween;\r\n    fnReturn.min = min;\r\n    fnReturn.max = max;\r\n    fnReturn.gcd = gcd;\r\n    fnReturn.lcm = lcm;\r\n    return fnReturn;\r\n})();\r\n\r\nif (true) {\r\n    module.exports = bigInt;\r\n}\r\n\n\n//# sourceURL=webpack:///./src/BigInteger.js?");

/***/ }),

/***/ "./src/seededRandom.ts":
/*!*****************************!*\
  !*** ./src/seededRandom.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// const bigInt = require(\"bigInt\");\r\n/**\r\n * minified seededRandom as in Java\r\n */\r\nvar SeededRandom = /** @class */ (function () {\r\n    function SeededRandom(initseed) {\r\n        if (initseed === undefined)\r\n            initseed = Date.now();\r\n        this.seed = bigInt(initseed);\r\n        this.seed = this.initialScramble(this.seed);\r\n        this.multiplier = bigInt(\"5DEECE66D\", 16);\r\n        this.addend = bigInt(\"B\", 16);\r\n        this.mask = bigInt(\"281474976710655\");\r\n        this.seed = this.initialScramble(this.seed);\r\n    }\r\n    SeededRandom.prototype.initialScramble = function (seed) {\r\n        var temp = seed.TwosCompXor(this.multiplier, 64);\r\n        return temp.TwosCompAnd(this.mask, 64);\r\n    };\r\n    ;\r\n    SeededRandom.prototype.setSeed = function (newseed) {\r\n        this.seed = this.initialScramble(newseed);\r\n    };\r\n    ;\r\n    SeededRandom.prototype.next = function (bits) {\r\n        var oldseed = this.seed;\r\n        var nextseed = oldseed.multiply(this.multiplier).add(this.addend).TwosCompAnd(this.mask);\r\n        this.seed = nextseed;\r\n        return Math.floor(nextseed.shiftRight(48 - bits));\r\n    };\r\n    ;\r\n    SeededRandom.prototype.nextInt = function (bound) {\r\n        if (bound <= 0)\r\n            bound *= -1;\r\n        var r = this.next(31);\r\n        var m = bound - 1;\r\n        if ((bound & m) === 0) // i.e., bound is a power of 2\r\n            r = Math.floor((bound * r) >> 31);\r\n        else {\r\n            for (var u = r; u - (r = u % bound) + m < 0; u = this.next(31))\r\n                ;\r\n        }\r\n        return r;\r\n    };\r\n    ;\r\n    SeededRandom.prototype.getSeed = function () {\r\n        return this.seed;\r\n    };\r\n    ;\r\n    return SeededRandom;\r\n}());\r\nexports.SeededRandom = SeededRandom;\r\n;\r\n\n\n//# sourceURL=webpack:///./src/seededRandom.ts?");

/***/ }),

/***/ "./src/slimeMap.js":
/*!*************************!*\
  !*** ./src/slimeMap.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var SlimeMap = function () {\r\n\tvar that = this;\r\n\tvar height = 0;\r\n\tvar width = 0;\r\n\tvar xPos = 0;\r\n\tvar yPos = 0;\r\n\tvar mousePos = new Array(2);\r\n\tvar zoom = 2.5;\r\n\tvar minzoom = 0.7;\r\n\tvar maxzoom = 5;\r\n\tvar vp;\r\n\tvar chunkbuffer = 3;\r\n\tvar chunkvp;\r\n\tvar slimechunks;\r\n\tvar borderleft = 70;\r\n\tvar bordertop = 50;\r\n\tvar borderbottom = 20;\r\n\tvar borderright = 20;\r\n\tvar grabbed = false;\r\n\tvar grabbedCoord = new Array(2);\r\n\tvar canvas;\r\n\tvar ctx = false;\r\n\r\n\tthis.init = function (id) {\r\n\t\tinitCanvas(id);\r\n\t\tupdate();\r\n\t\tdrawStaticUI();\r\n\t\tvp = viewport();\r\n\t\tchunkvp = chunkviewport();\r\n\t\tinitSlimeChunks();\r\n\t\tredraw();\r\n\t};\r\n\r\n\tfunction initCanvas(id) {\r\n\t\tcanvas = document.getElementById(id);\r\n\t\tif (canvas.getContext) {\r\n\t\t\tctx = canvas.getContext('2d');\r\n\t\t} else {\r\n\t\t\talert(\"Dein Browser unterstützt diese Funktion noch nicht.\\nBitte installiere die neueste Version von deinem Browser.\");\r\n\t\t}\r\n\t\tassertEventHandlers();\r\n\t}\r\n\r\n\tfunction assertEventHandlers() {\r\n\t\tvar mousewheelevt = (/Firefox/i.test(navigator.userAgent)) ? \"DOMMouseScroll\" : \"mousewheel\"; //FF doesn't recognize mousewheel as of FF3.x\r\n\r\n\t\tif (canvas.attachEvent) //if IE (and Opera depending on user setting)\r\n\t\t\tcanvas.attachEvent(\"on\" + mousewheelevt, function (e) { onscroll(e); });\r\n\t\telse if (canvas.addEventListener) //WC3 browsers\r\n\t\t\tcanvas.addEventListener(mousewheelevt, function (e) { onscroll(e); }, false);\r\n\r\n\t\tfunction onscroll(event) {\r\n\t\t\tif (getMapCoord(mousePos)) {\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar zoomfactor = 0.2;\r\n\t\t\t\tif (zoom < 2) zoomfactor /= 2;\r\n\t\t\t\tif (event.wheelDelta < 0) {\r\n\t\t\t\t\tzoomfactor *= - 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (event.detail < 0) {\r\n\t\t\t\t\tzoomfactor *= - 1;\r\n\t\t\t\t}\r\n\t\t\t\tif ((zoom + zoomfactor) >= minzoom && (zoom + zoomfactor) <= maxzoom) {\r\n\t\t\t\t\tzoom += zoomfactor;\r\n\t\t\t\t\tredraw();\r\n\t\t\t\t}\r\n\t\t\t\tonMouseMove();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcanvas.onmousemove = function (event) {\r\n\t\t\tmousePos[0] = event.layerX;\r\n\t\t\tmousePos[1] = event.layerY;\r\n\t\t\tonMouseMove();\r\n\t\t};\r\n\r\n\t\tcanvas.onmousedown = function (event) {\r\n\t\t\tvar vec = getMapCoord(mousePos);\r\n\t\t\tif (vec) {\r\n\t\t\t\tgrabbed = true;\r\n\t\t\t\tcanvas.setAttribute(\"style\", \"cursor: grabbing; cursor: -webkit-grabbing\");\r\n\t\t\t\tgrabbedCoord = vec;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tcanvas.onmouseup = function (event) {\r\n\t\t\tcanvas.setAttribute(\"style\", \"cursor: grab; cursor: -webkit-grab\");\r\n\t\t\tgrabbed = false;\r\n\t\t};\r\n\t}\r\n\r\n\tfunction chunkviewport() {\r\n\t\tvar v = new Array(4);\r\n\t\tv[0] = Math.ceil(vp[0] / 16) - chunkbuffer;\r\n\t\tv[1] = Math.ceil(vp[1] / 16) - chunkbuffer;\r\n\t\tv[2] = Math.ceil(vp[2] / 16) + chunkbuffer;\r\n\t\tv[3] = Math.ceil(vp[3] / 16) + chunkbuffer;\r\n\t\treturn v;\r\n\t}\r\n\r\n\tfunction isSlimeChunk(vec) {\r\n\t\tvar xPos = vec[0];\r\n\t\tvar zPos = vec[1];\r\n\t\tvar tempseed = new bigInt(\"4987142\").multiply(xPos).multiply(xPos);\r\n\t\ttempseed = tempseed.add(new bigInt(\"5947611\").multiply(xPos));\r\n\t\ttempseed = tempseed.add(new bigInt(\"4392871\").multiply(zPos).multiply(zPos));\r\n\t\ttempseed = tempseed.add(new bigInt(\"389711\").multiply(zPos));\r\n\t\ttempseed = seed.add(tempseed);\r\n\t\ttempseed = tempseed.TwosCompXor(new bigInt(\"987234911\"));\r\n\r\n\t\tvar rnd = new seededRandom(tempseed.toString());\r\n\t\treturn (rnd.nextInt(10) === 0);\r\n\t\t//see http://minecraft-de.gamepedia.com/Schleim?cookieSetup=true#Spawning_in_speziellen_Chunks\r\n\t}\r\n\r\n\tfunction update() {\r\n\t\tif (!ctx) return;\r\n\t\tvp = viewport();\r\n\t\twidth = canvas.width;\r\n\t\theight = canvas.height;\r\n\t}\r\n\r\n\tfunction onMouseMove() {\r\n\t\tclearfooter();\r\n\t\tvar vec = getMapCoord(mousePos);\r\n\t\tif (vec) {\r\n\t\t\tif (grabbed) {\r\n\t\t\t\tcanvas.setAttribute(\"style\", \"cursor: grabbing; cursor: -webkit-grabbing\");\r\n\t\t\t\tvar offsetX = grabbedCoord[0] - xPos;\r\n\t\t\t\tvar offsetY = grabbedCoord[1] - yPos;\r\n\t\t\t\txPos = vec[0] - offsetX;\r\n\t\t\t\tyPos = vec[1] - offsetY;\r\n\t\t\t\tredraw();\r\n\t\t\t} else {\r\n\t\t\t\tcanvas.setAttribute(\"style\", \"cursor: grab; cursor: -webkit-grab\");\r\n\t\t\t\tctx.font = \"15px MyriadPro\";\r\n\t\t\t\tctx.fillStyle = \"#000000\";\r\n\t\t\t\tctx.fillText(\"X: \" + vec[0].toFixed(1) + \"    Z: \" + vec[1].toFixed(1), borderleft, height - borderbottom + 15);\r\n\r\n\t\t\t\tvar Chunk = new Array(2);\r\n\t\t\t\tChunk[0] = Math.floor(vec[0] / 16);\r\n\t\t\t\tChunk[1] = Math.floor(vec[1] / 16);\r\n\t\t\t\tvar Slimes = (slimechunks[\"[\" + Chunk[0] + \",\" + Chunk[1] + \"]\"]) ? \"ja\" : \"nein\";\r\n\t\t\t\tctx.fillText(\"Slimes: \" + Slimes, borderleft + 200, height - borderbottom + 15);\r\n\r\n\t\t\t\tvar From = new Array(2);\r\n\t\t\t\tFrom[0] = Chunk[0] * 16;\r\n\t\t\t\tFrom[1] = Chunk[1] * 16;\r\n\t\t\t\tvar To = new Array(2);\r\n\t\t\t\tTo[0] = (Chunk[0] + 1) * 16 - 1;\r\n\t\t\t\tTo[1] = (Chunk[1] + 1) * 16 - 1;\r\n\r\n\t\t\t\tctx.textAlign = \"end\";\r\n\t\t\t\tctx.fillText(\"Chunk: ( \" + Chunk[0] + \" / \" + Chunk[1] + \" )  im Bereich von: ( \" +\r\n\t\t\t\t\tFrom[0] + \" / \" + From[1] + \")  bis: ( \" +\r\n\t\t\t\t\tTo[0] + \" / \" + To[1] + \" )\", width - borderright, height - borderbottom + 15);\r\n\t\t\t\tctx.textAlign = \"start\";\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tcanvas.setAttribute(\"style\", \"cursor: default\");\r\n\t\t}\r\n\t}\r\n\r\n\tfunction clearfooter() {\r\n\t\tctx.fillStyle = \"#CED4DE\";\r\n\t\tctx.fillRect(borderleft, height - borderbottom, width - borderleft, borderbottom);\r\n\t}\r\n\r\n\tfunction redraw() {\r\n\t\tvp = viewport();\r\n\r\n\r\n\t\t//fill map\r\n\t\tctx.fillStyle = \"#e0e0e0\";\r\n\t\tvar p1 = new Array(2);\r\n\t\tvar p2 = new Array(2);\r\n\t\tp1[0] = vp[0];\r\n\t\tp1[1] = vp[1];\r\n\t\tp2[0] = vp[2];\r\n\t\tp2[1] = vp[3];\r\n\t\tp1 = getAbsCoord(p1);\r\n\t\tp2 = getAbsCoord(p2);\r\n\t\tctx.fillRect(p1[0], p1[1], p2[0] - p1[0], p2[1] - p1[1]);\r\n\r\n\t\t//UI\r\n\t\tdrawUI();\r\n\t\tdrawAxes();\r\n\t\tdrawSlimeChunks();\r\n\t\tclearBorderRight();\r\n\t\tclearfooter();\r\n\t\trecalcSlimeChunks();\r\n\t}\r\n\r\n\tfunction recalcSlimeChunks() {\r\n\t\tif (JSON.stringify(chunkvp) != JSON.stringify(chunkviewport())) {\r\n\t\t\tvar newChunkvp = chunkviewport();\r\n\t\t\tvar top = chunkvp[1] - newChunkvp[1];\r\n\t\t\tvar bottom = newChunkvp[3] - chunkvp[3];\r\n\t\t\tvar left = chunkvp[0] - newChunkvp[0];\r\n\t\t\tvar right = newChunkvp[2] - chunkvp[2];\r\n\r\n\t\t\tif (top > 0) {\r\n\t\t\t\tfor (var i = 1; i <= top; i++) {\r\n\t\t\t\t\t//addRow( chunkvp[1] - i );\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor (var i = 0; i > top; i--) {\r\n\t\t\t\t\tremoveRow(chunkvp[1] - i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (bottom > 0) {\r\n\t\t\t\tfor (var i = 1; i <= bottom; i++) {\r\n\t\t\t\t\t//addRow( chunkvp[3] + i );\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor (var i = 0; i > bottom; i--) {\r\n\t\t\t\t\tremoveRow(chunkvp[3] + i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (left > 0) {\r\n\t\t\t\tfor (var i = 1; i <= left; i++) {\r\n\t\t\t\t\t//addColumn( chunkvp[0] - i );\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor (var i = 0; i > left; i--) {\r\n\t\t\t\t\tremoveColumn(chunkvp[0] - i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (right > 0) {\r\n\t\t\t\tfor (var i = 1; i <= right; i++) {\r\n\t\t\t\t\t//addColumn( chunkvp[2] + i );\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor (var i = 0; i > right; i--) {\r\n\t\t\t\t\tremoveColumn(chunkvp[2] + i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tchunkvp = newChunkvp;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction addRow(row) {\r\n\t\tvar Cols = Math.abs(chunkvp[1]) + Math.abs(chunkvp[3]);\r\n\t\tfor (var i = 0; i < Cols; i++) {\r\n\t\t\tvar mapChunkPos = getMapChunkPos(new Array(i, 0));\r\n\t\t\tvar isSC = isSlimeChunk(new Array(mapChunkPos[0], row));\r\n\t\t\tvar hash = JSON.stringify(mapChunkPos);\r\n\t\t\tslimechunks[hash] = isSC;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction removeRow(row) {\r\n\t\tvar keys = Object.keys(slimechunks);\r\n\t\tfor (i = 0; i < keys.length; i++) {\r\n\t\t\tvar key = keys[i];\r\n\t\t\tif (key.indexOf(\",\" + row + \"]\") != -1) delete slimechunks[key];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction addColumn(col) {\r\n\t\tvar Rows = Math.abs(chunkvp[0]) + Math.abs(chunkvp[2]);\r\n\t\tfor (var i = 0; i < Rows; i++) {\r\n\t\t\tvar mapChunkPos = getMapChunkPos(new Array(0, i));\r\n\t\t\tvar isSC = isSlimeChunk(new Array(col, mapChunkPos[1]));\r\n\t\t\tvar hash = JSON.stringify(mapChunkPos);\r\n\t\t\tslimechunks[hash] = isSC;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction removeColumn(col) {\r\n\t\tvar keys = Object.keys(slimechunks);\r\n\t\tfor (i = 0; i < keys.length; i++) {\r\n\t\t\tvar key = keys[i];\r\n\t\t\tif (key.indexOf(\"[\" + col + \",\") != -1) delete slimechunks[key];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction initSlimeChunks() {\r\n\t\tvar ChunksCountX = Math.abs(chunkvp[0]) + Math.abs(chunkvp[2]);\r\n\t\tvar ChunksCountZ = Math.abs(chunkvp[1]) + Math.abs(chunkvp[3]);\r\n\r\n\t\tslimechunks = new Object({});\r\n\r\n\t\tfor (var i = 0; i < ChunksCountX; i++) {\r\n\t\t\tfor (var j = 0; j < ChunksCountZ; j++) {\r\n\t\t\t\tvar mapChunkPos = getMapChunkPos(new Array(i, j));\r\n\t\t\t\tvar isSC = isSlimeChunk(mapChunkPos);\r\n\t\t\t\tvar hash = JSON.stringify(mapChunkPos);\r\n\r\n\t\t\t\tslimechunks[hash] = isSC;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getMapChunkPos(vec) {\r\n\t\tvec[0] += chunkvp[0];\r\n\t\tvec[1] += chunkvp[1];\r\n\t\treturn vec;\r\n\t}\r\n\r\n\tfunction drawSlimeChunks() {\r\n\t\tctx.fillStyle = \"#44dd55\";\r\n\r\n\t\tvar ChunksCountX = Math.abs(chunkvp[0]) + Math.abs(chunkvp[2]);\r\n\t\tvar ChunksCountZ = Math.abs(chunkvp[1]) + Math.abs(chunkvp[3]);\r\n\r\n\t\tfor (var i = 0; i < ChunksCountX; i++) {\r\n\t\t\tfor (var j = 0; j < ChunksCountZ; j++) {\r\n\t\t\t\tvar mapChunkPos = getMapChunkPos(new Array(i, j));\r\n\t\t\t\tvar key = JSON.stringify(mapChunkPos);\r\n\t\t\t\tif (slimechunks[key] === undefined) slimechunks[key] = isSlimeChunk(mapChunkPos);\r\n\t\t\t\tif (slimechunks[key]) {\r\n\t\t\t\t\tvar vec = mapChunkPos;\r\n\t\t\t\t\tvec[0] *= 16;\r\n\t\t\t\t\tvec[1] *= 16;\r\n\r\n\t\t\t\t\tvar vec2 = getAbsCoord(vec);\r\n\t\t\t\t\tif (vec2)\r\n\t\t\t\t\t\tctx.fillRect(vec2[0] + 1, vec2[1] + 1, 16 * zoom - 2, 16 * zoom - 2);\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvec2 = getAbsCoord(vec, true);\r\n\t\t\t\t\t\tvar x = vec2[0] + 1;\r\n\t\t\t\t\t\tvar z = vec2[1] + 1;\r\n\t\t\t\t\t\tvar width = (16 * zoom) - 2;\r\n\t\t\t\t\t\tvar height = (16 * zoom) - 2;\r\n\t\t\t\t\t\tvar paint = false;\r\n\r\n\t\t\t\t\t\tif (x < borderleft && x + width >= borderleft) {\r\n\t\t\t\t\t\t\twidth += x - borderleft;\r\n\t\t\t\t\t\t\tx = borderleft;\r\n\t\t\t\t\t\t\tpaint = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (z < bordertop && z + height >= bordertop) {\r\n\t\t\t\t\t\t\theight += z - bordertop;\r\n\t\t\t\t\t\t\tz = bordertop;\r\n\t\t\t\t\t\t\tpaint = true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (x + width < borderleft || z + height < bordertop) paint = false;\r\n\r\n\t\t\t\t\t\tif (paint) ctx.fillRect(x, z, width, height);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction drawUI() {\r\n\t\tclearAxes();\r\n\t\tvar factor = 16;\r\n\t\tif (zoom < 2) factor *= 2;\r\n\t\tif (zoom < 0.9) factor *= 2;\r\n\t\tctx.font = \"12px MyriadPro\";\r\n\t\tctx.fillStyle = \"#000000\";\r\n\t\t//X\r\n\t\tfor (var i = Math.ceil(vp[0] / factor); i <= Math.floor(vp[2] / factor); i++) {\r\n\t\t\tvar mark = i * factor;\r\n\t\t\tvar pos = new Array(mark, vp[1]);\r\n\t\t\tpos = getAbsCoord(pos);\r\n\t\t\tctx.fillText(mark, pos[0] - (mark.toString().length * 3), bordertop - 5);\r\n\t\t}\r\n\t\t//Z\r\n\t\tfor (i = Math.ceil(vp[1] / factor); i <= Math.floor(vp[3] / factor); i++) {\r\n\t\t\tvar mark = i * factor;\r\n\t\t\tvar pos = new Array(vp[0], mark);\r\n\t\t\tpos = getAbsCoord(pos);\r\n\t\t\tctx.fillText(mark, borderleft - 30, pos[1] + 4);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction drawStaticUI() {\r\n\t\tif (!ctx) return;\r\n\t\t//clear;\r\n\t\tctx.fillStyle = \"#CED4DE\";\r\n\t\tctx.fillRect(0, 0, width, height);\r\n\r\n\r\n\t\t//Border\r\n\t\tctx.lineWidth = 1.0;\r\n\t\tctx.beginPath();\r\n\t\tctx.fillStyle = \"#000000\";\r\n\t\tctx.strokeStyle = \"#000000\";\r\n\t\tctx.moveTo(width - borderright, bordertop - 1);\r\n\t\tctx.lineTo(borderleft - 1, bordertop - 1);\r\n\t\tctx.lineTo(borderleft - 1, height - borderbottom);\r\n\t\tctx.stroke();\r\n\t\tctx.closePath();\r\n\r\n\t\tctx.strokeStyle = \"#333333\";\r\n\t\tctx.fillStyle = \"#333333\";\r\n\t\t//North\r\n\t\tctx.lineWidth = 0.7;\r\n\t\tctx.moveTo(15, 5);\r\n\t\tctx.lineTo(5, 30);\r\n\t\tctx.lineTo(15, 20);\r\n\t\tctx.stroke();\r\n\t\tctx.beginPath();\r\n\t\tctx.moveTo(15, 20);\r\n\t\tctx.lineTo(25, 30);\r\n\t\tctx.lineTo(15, 5);\r\n\t\tctx.fill();\r\n\t\tctx.stroke();\r\n\t\tctx.closePath();\r\n\t\tctx.font = \"15px MyriadPro\";\r\n\t\tctx.fillText(\"N\", 10, 40);\r\n\t\tctx.fillText(\"Seed: \" + seed.toString(), 40, 20);\r\n\r\n\t\t//Axisnames\r\n\t\t//X\r\n\t\tctx.font = \"20px MyriadPro\";\r\n\t\tvar mapwidthcenter = borderleft + ((width - borderleft - borderright) / 2);\r\n\t\tctx.fillText(\"X\", mapwidthcenter - 10, 20);\r\n\t\tctx.lineWidth = 0.4;\r\n\t\tctx.beginPath();\r\n\t\tctx.moveTo(mapwidthcenter + 5, 13);\r\n\t\tctx.lineTo(mapwidthcenter + 17, 13);\r\n\t\tctx.lineTo(mapwidthcenter + 14, 10);\r\n\t\tctx.stroke();\r\n\t\tctx.moveTo(mapwidthcenter + 17, 13);\r\n\t\tctx.lineTo(mapwidthcenter + 14, 16);\r\n\t\tctx.stroke();\r\n\t\tctx.closePath();\r\n\t\t//Z\r\n\t\tvar mapheightcenter = bordertop + ((height - bordertop - borderbottom) / 2);\r\n\t\tctx.fillText(\"Z\", 7.5, mapheightcenter - 5);\r\n\t\tctx.lineWidth = 0.4;\r\n\t\tctx.beginPath();\r\n\t\tctx.moveTo(13, mapheightcenter);\r\n\t\tctx.lineTo(13, mapheightcenter + 12);\r\n\t\tctx.lineTo(10, mapheightcenter + 9);\r\n\t\tctx.stroke();\r\n\t\tctx.moveTo(13, mapheightcenter + 12);\r\n\t\tctx.lineTo(16, mapheightcenter + 9);\r\n\t\tctx.stroke();\r\n\t\tctx.closePath();\r\n\t}\r\n\r\n\tfunction drawAxes() {\r\n\t\tvar factor = 16;\r\n\t\tctx.strokeStyle = \"#000000\";\r\n\t\t//X\r\n\t\tfor (var i = Math.ceil(vp[0] / factor); i <= Math.floor(vp[2] / factor); i++) {\r\n\t\t\tif (i === 0) ctx.lineWidth = 0.8;\r\n\t\t\telse ctx.lineWidth = 0.5;\r\n\t\t\tvar mark = i * factor;\r\n\t\t\tvar pos = new Array(mark, vp[1]);\r\n\t\t\tpos = getAbsCoord(pos);\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.moveTo(pos[0], bordertop);\r\n\t\t\tctx.lineTo(pos[0], height - borderbottom);\r\n\t\t\tctx.stroke();\r\n\t\t\tctx.closePath();\r\n\t\t}\r\n\t\t//Z\r\n\t\tfor (i = Math.ceil(vp[1] / factor); i <= Math.floor(vp[3] / factor); i++) {\r\n\t\t\tif (i === 0) ctx.lineWidth = 0.8;\r\n\t\t\telse ctx.lineWidth = 0.5;\r\n\t\t\tvar mark = i * factor;\r\n\t\t\tvar pos = new Array(vp[0], mark);\r\n\t\t\tpos = getAbsCoord(pos);\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.moveTo(borderleft, pos[1]);\r\n\t\t\tctx.lineTo(width - borderright, pos[1]);\r\n\t\t\tctx.stroke();\r\n\t\t\tctx.closePath();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction clearAxes() {\r\n\t\tctx.fillStyle = \"#CED4DE\";\r\n\t\tctx.fillRect(30, bordertop - 22, width - 30, 20);\r\n\t\tctx.fillRect(borderleft - 32, 40, 30, height - 40);\r\n\t}\r\n\r\n\tfunction clearBorderRight() {\r\n\t\tctx.fillStyle = \"#CED4DE\";\r\n\t\tctx.fillRect(width - borderright, 0, borderright, height);\r\n\t}\r\n\r\n\tfunction isInVP(vec) {\r\n\t\treturn (vec[0] >= vp[0] && vec[0] <= vp[2] &&\r\n\t\t\tvec[1] >= vp[1] && vec[1] <= vp[3]);\r\n\t}\r\n\r\n\tfunction isOverMap(vec) {\r\n\t\treturn (vec[0] >= borderleft && vec[0] <= (width - borderright) &&\r\n\t\t\tvec[1] >= bordertop && vec[1] <= (height - borderbottom));\r\n\t}\r\n\r\n\tfunction getAbsCoord(vec, ignoreBorder) {\r\n\t\tif (isInVP(vec) || ignoreBorder) {\r\n\t\t\tvar vec2 = new Array(2);\r\n\t\t\tvec2[0] = ((Math.floor(vec[0]) - vp[0]) * zoom) + borderleft;\r\n\t\t\tvec2[1] = ((Math.floor(vec[1]) - vp[1]) * zoom) + bordertop;\r\n\t\t\treturn vec2;\r\n\t\t} else return false;\r\n\t}\r\n\r\n\tfunction getMapCoord(vec) {\r\n\t\tif (isOverMap(vec)) {\r\n\t\t\tvar vec2 = new Array(2);\r\n\t\t\tvec2[0] = (vec[0] - borderleft) / zoom;\r\n\t\t\tvec2[1] = (vec[1] - bordertop) / zoom;\r\n\t\t\tvec2[0] += vp[0];\r\n\t\t\tvec2[1] += vp[1];\r\n\t\t\treturn vec2;\r\n\t\t} else return false;\r\n\t}\r\n\r\n\tfunction viewport() {\r\n\t\tvar v = new Array(4);\r\n\t\tvar totalwidth = (width - borderleft) - borderright;\r\n\t\tvar totalheight = height - bordertop - borderbottom;\r\n\t\tv[0] = -(Math.ceil((xPos + (totalwidth / 2)) / zoom));\r\n\t\tv[1] = -(Math.ceil((yPos + (totalheight / 2)) / zoom));\r\n\t\tv[2] = -(Math.floor((xPos - (totalwidth / 2)) / zoom));\r\n\t\tv[3] = -(Math.floor((yPos - (totalheight / 2)) / zoom));\r\n\t\treturn v;\r\n\t}\r\n\r\n};\r\n\r\nfunction onload() {\r\n\tif (document.readyState == \"interactive\") {\r\n\t\tvar sm = new SlimeMap();\r\n\t\tsm.init(\"slimemap-canvas\");\r\n\t}\r\n};\r\n\r\ndocument.onreadystatechange = onload;\r\n\n\n//# sourceURL=webpack:///./src/slimeMap.js?");

/***/ }),

/***/ "./src/slimeMap.ts":
/*!*************************!*\
  !*** ./src/slimeMap.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result[\"default\"] = mod;\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar bigInteger = __importStar(__webpack_require__(/*! ./BigInteger */ \"./src/BigInteger.js\"));\r\nvar seededRandom_1 = __webpack_require__(/*! ./seededRandom */ \"./src/seededRandom.ts\");\r\nvar slimeMap = __importStar(__webpack_require__(/*! ./slimeMap.js */ \"./src/slimeMap.js\"));\r\nvar SlimeM = /** @class */ (function () {\r\n    function SlimeM() {\r\n        this.seed = new seededRandom_1.SeededRandom();\r\n    }\r\n    return SlimeM;\r\n}());\r\nexports.SlimeM = SlimeM;\r\n;\r\nexports.e = {\r\n    slimeMap: slimeMap,\r\n    bigInteger: bigInteger\r\n};\r\n\n\n//# sourceURL=webpack:///./src/slimeMap.ts?");

/***/ })

/******/ });